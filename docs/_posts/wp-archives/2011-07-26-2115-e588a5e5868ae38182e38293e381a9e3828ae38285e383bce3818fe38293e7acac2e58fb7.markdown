---
author: ikedaj
comments: false
date: 2011-07-26 11:48:27+00:00
layout: post
permalink: /wp/archives/2115
slug: '%e5%88%a5%e5%86%8a%e3%81%82%e3%82%93%e3%81%a9%e3%82%8a%e3%82%85%e3%83%bc%e3%81%8f%e3%82%93%e7%ac%ac2%e5%8f%b7'
title: 別冊あんどりゅーくん(第2号)
wordpress_id: 2115
categories:
- 読み物
tags:
- あんどりゅーくん
---

[![](/assets/images/wp-content/de42f2642d5f2ad6230cda441238ecc6-150x150.png)](/wp/archives/1097/%e3%81%82%e3%82%93%e3%81%a9%e3%82%8a%e3%82%85%e3%83%bc%e5%90%9b)7月14日(金)と15日(土)に開催されたOSC2011 Kansai@Kyotoに行ってきました。
クリアフォルダ250枚と団扇300枚は2日目の
終了3時間前くらいになくなってしまいました。
次回のOSC＠名古屋でも配布する予定なので
ご希望の方はお早めにブースまでお越しください。

[![](/assets/images/wp-content/DSCN0981-300x225.jpg)](/wp/archives/2115/dscn0981)

 

 

[![](/assets/images/wp-content/DSCN0980-300x225.jpg)](/wp/archives/2115/dscn0980)

 

 

 

 

 

 

 




 

また、猛暑にもかかわらず、2日目11時からのセミナーには40名の方に参加していただきました。
講師は「あ、eject の方？」でお馴染みの、たなかさんでした。おつかれさまでした！
当日の資料は[こちら](/wp/archives/2086)からダウンロードすることができます。

今回は、ブースでお留守番をしていたときにいただいた質問と、
セミナーの最後にいただいた質問をおさらいしてみようと思います。

**
ブースでいただいた質問 **

**(1) Pacemakerは仮想環境でも使用できるか？**
**(2) 必要なNICの本数は？**
**(3) 事例は公開されているか？**
**(4) 将来の目標は？**
**(5) 読み方はピースメーカー？ペースメーカー？**
**(6) BSDで使えるか？**

**(1) Pacemakerは仮想環境でも使用できるか？**

使えます。
OSC関西＠京都のセミナーでは仮想環境でデモを行いました。
資料にも「本日のPacemakerデモ環境」として仮想環境でのクラスタ構成が紹介されています。
仮想環境の構成には



	
  * ゲストOSにPacemakerをインストールするパターン

	
  * ホストOSにPacemakerをインストールするパターン


の2パターンがあります。

ゲストOSにPacemakerをインストールするパターンは、ゲストOS≒物理サーバです。

ホストOSにPacemakerをインストールするパターンは、ゲストOSを「リソース」として
VirtualDomain RAで監視します。 
ゲストOSのマイグレーションとかもできます。
このパターンでは、ゲストOS上で起動している特定のプロセスは監視できないので、
ホストOSにもゲストOSにもPacemakerをインストールする多層式の構成となる場合もあります。




**(2) 必要なNICの本数は？**

ノード間で生死を確認しあうためのインターコネクトLANは絶対に必要です。
なので、インターコネクトLAN用に最低でも1本は必要です。
ただし、インターコネクトLANは2本以上用意して冗長性を確保することが推奨されています。
その他にも、WebサーバやDBなど、外部からアクセスするための仮想IPアドレスが必要なサービスの場合は仮想IP用のサービスLANも必要となります。
サービスLANは2本以上用意して冗長性を確保することが推奨されています。
サービスLANを冗長化する場合はbondigを利用してください。

そういえば、インターコネクトLANはbondingしなくていいの？と思われるかもしれませんが、
メッセージングレイヤにHeartbeatを使用する場合は、bondingでもbondingでなくてもどっちでもいいです。
ただし、Corosyncを使用する場合はbondingを使用したほうがよいかもしれません。
Corosyncは複数のインターコネクトLAN構成で、接続が切れたり繋がったりしたときの
「表示系」がまだちょっと弱かったような気がする。。
動作は問題ないはず（たぶん）。 
最近は直ってきたのかもしれません。v1.4でたし！？

一方、メッセージングレイヤにHeartbeatを使用する場合は、bondingを使わない場合が多いような気がします。
ha.cfにインターフェース名を複数書けばいいだけの話しなので、わざわざbondingにしなくてもいいよねえ、というかbondingドライバのバグにはまっちゃうとヤダとかそういうのもあったような気がする。

インターコネクトLAN、サービスLANの他に、管理者や運用担当者、もしくは運用管理ツールがPacemakerの実行状況などを確認するための管理LANも別系統であると便利かもしれません。
管理LANはそれほどがつがつ使うこともないはずなのでインターコネクトLANまたはサービスLANと兼用でも問題ありません。

DRBDも組み合わせて使用する場合は、DRBDの同期LANも必要となります。
DRBDは、一つの同期リソースにつき、1本の同期LANしか設定することができないので
bondingで冗長化することが推奨されています。
同期リソースが複数ある場合は、同期LANの本数を増やす、もしくは
1本の同期LANで複数のポートを使用することになります。 

というわけで

最小構成(合計1本)



	
  * インターコネクトLAN    1本


冗長構成(合計7本)



	
  * インターコネクトLAN    2本

	
  * サービスLAN               2本(bondingで1本に集約)

	
  * 管理LAN                     1本

	
  * DRBDの同期LAN          2本(bondingで1本に集約)


となります。

**
(3) 事例は公開されているか？**

Linux-HA Japanの公式サイトで事例の公開は行っていません。
お隣にブースを出していただいた株式会社サードウェアさんのWebサイト「[Linux-HA (DRBD) ユーザ事例](http://www.3ware.co.jp/download.html)」からDRBD関連の事例をダウンロードすることができます。
Linux-HA Japanの公式サイトにも事例を公開していきたいのですが、いろいろと大人の事情で難しいようですね…。
「公開しても問題ありません」という案件や実際に稼動しているシステムがあれば、ぜひ[メーリングリスト](/wp/ml)までご連絡ください。

 

**(4) 将来の目標は？**

ちょっとのけぞりましたが、これって今後のロードマップってことですね。
一瞬、小学校の卒業文集的なナニカかと思いましたよ…。
ちなみに、あんどりゅーくんのつくった[ロードマップ](http://www.clusterlabs.org/wiki/Planned_Features)はこちら。
ロードマップというより、これから実装していきたい機能の落書き帳的なものなので、実装予定期日は決まっていません。
他にも



	
  * 仮想環境対応(キーワード：Matahari)

	
  * 大規模クラスタ対応


などがメーリングリストで話題になっています。

 

**(5) 読み方はピースメーカー？ペースメーカー？**

ペースメーカーです。
ピースメーカーだと Peacemakerになっちゃう気がします。Pacemakerです。

**
(6) BSDで使えるか？**
残念ながらBSDは未踏領域です。人柱大募集です。
Linux-HA Japan では、RedHat, CentOS用のRPMを作成していますが、
あんどりゅーくんの管理している [clusterlabs](http://www.clusterlabs.org/rpm/) からはFedora, openSUSE, EPEL用のRPMがダウンロードできます。

Debianは「はらくん」がパッケージングしてくれるらしいよ。


[![](/assets/images/wp-content/DSCN0993-300x225.jpg)](/wp/archives/2115/dscn0993)


はらくん(高校2年生)


[![](/assets/images/wp-content/DSCN0995-300x225.jpg)](/wp/archives/2115/dscn0995)


めっさいじられてますけど。

**セミナーでいただいた質問**[![](/assets/images/wp-content/de42f2642d5f2ad6230cda441238ecc6-150x150.png)](/wp/archives/1097/%e3%81%82%e3%82%93%e3%81%a9%e3%82%8a%e3%82%85%e3%83%bc%e5%90%9b)
**(1) デモで実行していたmove/unmoveコマンドはログに出力されるのか？**
**(2) Pacemakerのログメッセージ一覧表はあるか？**
**(3) クラスタ内の特定ノードをDCに固定することはできるか？**
**(4) STONITHを実行するためのハードウェアにはどのようなものがあるのか？**

 

**(1) デモで実行していたmove/unmoveコマンドはログに出力されるのか？**

Pacemakerの標準ログファイル(/var/log/ha-log)には、
リソースが移動した状況は出力されますが、どのコマンドが実行されたかはわかりません。
デモで使用していたpm_logconv-hbの出力ファイル(pm_logconv.out)にも
コマンドの実行は記録されません。
うーん、残念、と思っていたのですが、京都から戻ってきて思い出しました。
syslog(/var/log/messages)には、コマンドの実行履歴が残ります！
ただし、crm move/unmoveが内部的に実行している
crm_resourceコマンドの実行履歴が！！

…これはこれでまた残念な結果…。
残念ながらも、動作確認をしてみました。 

ホスト名はsrv01, srv02です。
使用した設定ファイルはこちら。

<table style="width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;">### Cluster Option ###</span>
<span style="font-family: verdana,geneva; font-size: small;"> property \</span>
<span style="font-family: verdana,geneva; font-size: small;"> no-quorum-policy="ignore" \</span>
<span style="font-family: verdana,geneva; font-size: small;"> stonith-enabled="false" \</span>
<span style="font-family: verdana,geneva; font-size: small;"> startup-fencing="false" </span><span style="font-family: verdana,geneva; font-size: small;">### Resource Defaults ###</span>
<span style="font-family: verdana,geneva; font-size: small;"> rsc_defaults \</span>
<span style="font-family: verdana,geneva; font-size: small;"> resource-stickiness="INFINITY" \</span>
<span style="font-family: verdana,geneva; font-size: small;"> migration-threshold="1"</span> 

<span style="font-family: verdana,geneva; font-size: small;">### Primitive Configuration ###</span>
<span style="font-family: verdana,geneva; font-size: small;"> primitive dummy ocf:heartbeat:Dummy \</span>
<span style="font-family: verdana,geneva; font-size: small;"> op start interval="0s" timeout="120s" on-fail="restart" \</span>
<span style="font-family: verdana,geneva; font-size: small;"> op monitor interval="10s" timeout="120s" on-fail="restart" \</span>
<span style="font-family: verdana,geneva; font-size: small;"> op stop interval="0s" timeout="120s" on-fail="stop"</span></td>
</tr>
</tbody>
</table>
初期起動時のリソースの状態はこんな感じ。

<table style="width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;">[root@srv01 ~]#<strong><span style="color: #339966;"> crm_mon -1</span></strong> </span><span style="font-family: verdana,geneva; font-size: small;"> 

============
<span style="font-family: verdana,geneva; font-size: small;"> Last updated: Mon Jul 25 17:40:27 2011</span>
<span style="font-family: verdana,geneva; font-size: small;"> Stack: Heartbeat</span>
<span style="font-family: verdana,geneva; font-size: small;"> Current DC: srv02 (22222222-2222-2222-2222-222222222222) - partition with quorum</span>
<span style="font-family: verdana,geneva; font-size: small;"> Version: 1.0.11-1554a83db0d3c3e546cfd3aaff6af1184f79ee87</span>
<span style="font-family: verdana,geneva; font-size: small;"> 2 Nodes configured, unknown expected votes</span>
<span style="font-family: verdana,geneva; font-size: small;"> 1 Resources configured.</span>
<span style="font-family: verdana,geneva; font-size: small;"> ============</span>

<span style="font-family: verdana,geneva; font-size: small;">Online: [ srv01 srv02 ]</span>

<span style="font-family: verdana,geneva; font-size: small;"> dummy  (ocf::heartbeat:Dummy): Started srv01</span>

 

 

 

</span></td>
</tr>
</tbody>
</table>
srv01で起動しているdummyをsrv02へ移動させます。
ここで、crmコマンドの後の「-R」オプションにご注目！


<table style="width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;">[root@srv01 ~]# <span style="color: #339966;"><strong>crm -R resource move dummy srv02 force</strong></span></span><span style="font-size: small;"><strong><span style="font-family: verdana,geneva; color: #ff00ff;"> 

<span style="font-family: verdana,geneva; color: #ff00ff;"><strong>.EXT crm_resource -M -r 'dummy' --node='srv02' --force</strong></span>

</span></strong> 

 

 

</span></td>
</tr>
</tbody>
</table>
ご存知の方も多いとは思いますが、crmコマンドが開発されるまでは、
crm_resource, crm_failcountなど複数のコマンドを使用してクラスタの管理を行ってきました。
現在でもこれらのコマンド群は使用可能ですが、ほとんどがcrmコマンドで代替可能となっています。
crmコマンドも結局は、内部的にこれらの古い（？）コマンドを呼び出しているのです。
syslog(/var/log/messages)にはこの古いほうのコマンドが出力されるのですが、
crmコマンドとは似ても似つかぬオプションだったりするので、同定が困難です。
そこで、魔法の「-R」オプションの登場です。

「-R」オプションを使用すると、.EXTで始まる行が出力されますが、
これが実際に実行されたコマンドの内容です。
上の例ではcrm_resourceコマンドが出力されています。
syslog(/var/log/messages)にもcrm_resourceコマンドが実行されたことが記録されています。

<table style="width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;">[root@srv01 ~]# <strong><span style="color: #339966;">cat /var/log/messages</span></strong> </span><span style="font-family: verdana,geneva; font-size: small;">
Jul 25 17:40:54 srv01 crm_resource: [25478]: info: Invoked: crm_resource -M -r dummy --node=srv02 --force</span></td>
</tr>
</tbody>
</table>
では、moveコマンドを実行したら必ずunmoveコマンドを実行！というお約束に従って
unmoveコマンドを実行しましょう。ここでも「-R」オプションをつけてみてください。

<table style="width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;">[root@srv01 ~]# <strong><span style="color: #339966;">crm -R resource unmove dummy</span></strong>
</span><span style="font-family: verdana,geneva; font-size: small;">.EXT crm_resource -U -r 'dummy'</span> 

<span style="font-family: verdana,geneva; font-size: small;">[root@srv01 ~]# <strong><span style="color: #339966;">cat /var/log/messages</span></strong>
Jul 25 17:41:22 srv01 crm_resource: [25505]: info: Invoked: crm_resource -U -r dummy</span></td>
</tr>
</tbody>
</table>
本来なら、Pacemakerの標準ログファイル(/var/log/ha-log)にcrmコマンドの実行内容が
ばしっとでるのが一番美しい形だと思います。
今後の改善項目として本家コミュニティにも提案してみようかどうしようか。


**
(2) Pacemakerのログメッセージ一覧表はあるか？**

現状、ありません。
ただし、pm_logconv-hbを開発する際に選出したログメッセージの一覧表はあるので、
こちらをわかりやすい形で公開することはできるかもしれません。
もしくは、勉強会のお題として「ha-logの読み方講座」をやってみる、とかですかね。
なんかめちゃくちゃ眠気をもよおしそうなお題ですけど。





**(3) クラスタ内の特定ノードをDCに固定することはできるか？**

ユーザがDCノードを決定することはできません。
ホスト名やノードのUUIDによって、初期起動時にDCになりやすいノードというのはあるのですが
タイミングの問題も絡んでくるので、DCを固定することにこだわらないほうがよいと思います。
初期起動時に特定ノードをDCとしたい場合は
1台のノードだけを起動して、そのノードがDCになるのを待ってから
他のノードを起動させるという運用でごまかすことができます。

参考メーリングリスト：[Linux-ha-jp] [初期起動時のCrrentDC](http://sourceforge.jp/projects/linux-ha/lists/archive/japan/2011-June/000724.html)

crm_mon で表示される「Current DC: ホスト名」で今どのノードがDCになっているのかを確認することができますが、crmadminコマンドでも確認することができます。

<table style="height: 23px; width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;"># <strong><span style="color: #339966;">crmadmin -D</span></strong>
</span><span style="font-family: verdana,geneva; font-size: small;">Designated Controller is: srv02</span></td>
</tr>
</tbody>
</table>
そういや、DCって「Designated Controller」の略なんだなあとかイマサラ思い出してみるとか。
** **



**
(4) STONITHを実行するためのハードウェアにはどのようなものがあるのか？**

HP iLO3, DELL DRAC, IBM IMMなどがあります。
これらは全てIPMIでサーバを管理することができるので、STONITHプラグインには「ipmi」を使用します。
HP iLO2, IBM RSAなどはIPMIに対応していないので、それぞれ「riloe」「ibmrsa-telnet」を使用します。

Pacemakerに同梱されているSTONITHプラグインはcrmコマンドで確認することができます。
（見やすいように一部整形しています）

<table style="width: 600px;" border="0">
<tbody>
<tr>
<td style="background-color: #f0f8ff;"><span style="font-family: verdana,geneva; font-size: small;">#<strong><span style="color: #339966;"> crm</span></strong> </span><span style="font-family: verdana,geneva; font-size: small;">crm(live)#<strong><span style="color: #339966;"> ra</span></strong></span> 

<span style="font-family: verdana,geneva; font-size: small;">crm(live)ra# <span style="color: #339966;"><strong>list stonith</strong></span></span>

<span style="font-family: verdana,geneva; font-size: small;">apcmaster </span>

<span style="font-family: verdana,geneva; font-size: small;">apcmastersnmp </span>

<span style="font-family: verdana,geneva; font-size: small;">apcsmart </span>

<span style="font-family: verdana,geneva; font-size: small;">baytech </span>

<span style="font-family: verdana,geneva; font-size: small;">bladehpi</span>

<span style="font-family: verdana,geneva; font-size: small;">cyclades </span>

<span style="font-family: verdana,geneva; font-size: small;">drac3 </span>

<span style="font-family: verdana,geneva; font-size: small;">external/drac5 </span>

<span style="font-family: verdana,geneva; font-size: small;">external/dracmc-telnet </span>

<span style="font-family: verdana,geneva; font-size: small;">external/hmchttp</span>

<span style="font-family: verdana,geneva; font-size: small;">external/ibmrsa </span>

<span style="font-family: verdana,geneva; font-size: small;"> external/ibmrsa-telnet </span>

<span style="font-family: verdana,geneva; font-size: small;">external/ipmi </span>

<span style="font-family: verdana,geneva; font-size: small;">external/ippower9258 </span>

<span style="font-family: verdana,geneva; font-size: small;">external/kdumpcheck</span>

<span style="font-family: verdana,geneva; font-size: small;">external/nut </span>

<span style="font-family: verdana,geneva; font-size: small;">external/rackpdu </span>

<span style="font-family: verdana,geneva; font-size: small;"> external/riloe </span>

<span style="font-family: verdana,geneva; font-size: small;">external/sbd </span>

<span style="font-family: verdana,geneva; font-size: small;">external/ssh</span>

<span style="font-family: verdana,geneva; font-size: small;">external/stonith-helper </span>

<span style="font-family: verdana,geneva; font-size: small;">external/vmware </span>

<span style="font-family: verdana,geneva; font-size: small;">external/xen0 </span>

<span style="font-family: verdana,geneva; font-size: small;">external/xen0-ha </span>

<span style="font-family: verdana,geneva; font-size: small;">ibmhmc</span>

<span style="font-family: verdana,geneva; font-size: small;">ipmilan </span>

<span style="font-family: verdana,geneva; font-size: small;">meatware </span>

<span style="font-family: verdana,geneva; font-size: small;">null </span>

<span style="font-family: verdana,geneva; font-size: small;">nw_rpc100s </span>

<span style="font-family: verdana,geneva; font-size: small;">rcd_serial</span>

<span style="font-family: verdana,geneva; font-size: small;">rps10 </span>

<span style="font-family: verdana,geneva; font-size: small;">ssh </span>

<span style="font-family: verdana,geneva; font-size: small;">suicide </span>

<span style="font-family: verdana,geneva; font-size: small;">wti_mpc </span>

<span style="font-family: verdana,geneva; font-size: small;">wti_nps</span></td>
</tr>
</tbody>
</table>
結構、たくさんありますね。
ハードウェア制御ボードを使わずにSTONITHの動作を試してみたいときは擬似的に「ssh」が使えます。
OSCのデモのように仮想環境でSTOTNIHを設定する場合は「xen0」を使います。

 

** **



**では、次回は名古屋で～。**
